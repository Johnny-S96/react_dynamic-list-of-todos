{"version":3,"sources":["components/UserSelectButton/UserSelectButton.jsx","types.js","components/Todo/Todo.jsx","components/Button/Button.jsx","components/TodoForm/TodoForm.jsx","components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["UserSelectButton","PropTypes","arrayOf","shape","id","number","isRequired","userId","title","string","completed","bool","func","selectedUserId","action","buttonClass","classNames","button","className","type","onClick","Todo","isCompleted","onUserSelect","checked","readOnly","Button","innerText","CurrentUser__clear","btn","TodoForm","state","inputValue","selectValue","selectRange","filterTodosByTitle","event","value","target","onTitleFiltering","props","setState","filterTodosByStatus","onStatusFiltering","this","onRandomize","htmlFor","placeholder","onChange","map","key","Component","TodoList","filteredTodos","preparedTodos","makeTitleFilter","makeStatusFilter","makeRandomSort","todos","randomizer","Math","floor","random","sort","query","filter","todo","description","regex","RegExp","test","todoItemClass","TodoList__item","API_URL","getUserDetails","fetch","then","response","json","result","data","user","catch","error","CurrentUser","currentUser","prevProps","a","onUserClear","name","email","phone","App","Number","split","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3fba22af.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { TodoButtonShape } from '../../types';\n\nexport const UserSelectButton = ({ userId, selectedUserId, action }) => {\n  const buttonClass = classNames({\n    'TodoList__user-button': true,\n    button: true,\n    'TodoList__user-button--selected': selectedUserId === userId,\n  });\n\n  return (\n    <button\n      className={buttonClass}\n      type=\"button\"\n      onClick={action}\n    >\n      User&nbsp;#\n      {userId}\n    </button>\n  );\n};\n\nUserSelectButton.propTypes = TodoButtonShape;\n","import PropTypes, { shape } from 'prop-types';\n\nexport const TodoListsShape = {\n  todos: PropTypes.arrayOf(\n    shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  onUserSelect: PropTypes.func.isRequired,\n  filterTodos: PropTypes.func.isRequired,\n};\n\nexport const TodoShape = {\n  userId: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  isCompleted: PropTypes.bool.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  onUserSelect: PropTypes.func.isRequired,\n};\n\nexport const TodoButtonShape = {\n  userId: PropTypes.number.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  action: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { UserSelectButton } from '../UserSelectButton';\nimport { TodoShape } from '../../types';\n\nexport const Todo = ({\n  userId,\n  title,\n  isCompleted,\n  selectedUserId,\n  onUserSelect,\n}) => (\n  <>\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={isCompleted}\n        readOnly\n      />\n      <p>{title}</p>\n    </label>\n    <UserSelectButton\n      userId={userId}\n      selectedUserId={selectedUserId}\n      action={onUserSelect}\n    />\n  </>\n);\n\nTodo.propTypes = TodoShape;\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const Button = ({ innerText, action }) => {\n  const buttonClass = classNames({\n    CurrentUser__clear: innerText === 'Clear',\n    btn: true,\n    'btn-warning': innerText === 'Clear',\n    'btn-info': innerText === 'Randomize',\n  });\n\n  return (\n    <button\n      className={buttonClass}\n      type=\"button\"\n      onClick={action}\n    >\n      {innerText}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  innerText: PropTypes.string.isRequired,\n  action: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '../Button';\n\nexport class TodoForm extends Component {\n  state = {\n    inputValue: '',\n    selectValue: 'all',\n    selectRange: ['all', 'active', 'completed'],\n  };\n\n  filterTodosByTitle = (event) => {\n    const { value } = event.target;\n    const { onTitleFiltering } = this.props;\n\n    this.setState({\n      inputValue: value,\n      selectValue: 'all',\n    });\n    onTitleFiltering(value);\n  };\n\n  filterTodosByStatus = (event) => {\n    const { value } = event.target;\n    const { onStatusFiltering } = this.props;\n\n    this.setState({ selectValue: value });\n\n    onStatusFiltering(value);\n  };\n\n  render() {\n    const {\n      inputValue,\n      selectValue,\n      selectRange,\n    } = this.state;\n    const { onRandomize } = this.props;\n\n    return (\n      <div className=\"input-group\">\n        <label className=\"input-group-text\" htmlFor=\"inputFilter\">\n          Filter by title\n        </label>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Title\"\n          id=\"inputFilter\"\n          value={inputValue}\n          onChange={this.filterTodosByTitle}\n        />\n        <label className=\"input-group-text\" htmlFor=\"selectFilter\">\n          Which todos to show?\n        </label>\n        <select\n          className=\"form-select\"\n          id=\"selectFilter\"\n          value={selectValue}\n          onChange={this.filterTodosByStatus}\n        >\n          {selectRange.map(value => (\n            <option key={value} value={value}>{value}</option>\n          ))}\n        </select>\n        <Button innerText=\"Randomize\" action={onRandomize} />\n      </div>\n    );\n  }\n}\n\nTodoForm.propTypes = {\n  onTitleFiltering: PropTypes.func.isRequired,\n  onStatusFiltering: PropTypes.func.isRequired,\n  onRandomize: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { Todo } from '../Todo';\nimport { TodoListsShape } from '../../types';\nimport { TodoForm } from '../TodoForm';\n\nexport class TodoList extends Component {\n  state = {\n    filteredTodos: null,\n    preparedTodos: null,\n  };\n\n  onTitleFiltering = (value) => {\n    this.setState({\n      preparedTodos: null,\n      filteredTodos: this.makeTitleFilter(value),\n    });\n  };\n\n  onStatusFiltering = (value) => {\n    this.setState({\n      preparedTodos: this.makeStatusFilter(value),\n    });\n  };\n\n  onRandomize = () => {\n    this.setState({\n      preparedTodos: this.makeRandomSort(),\n    });\n  }\n\n  makeRandomSort = () => {\n    const { todos } = this.props;\n    const { filteredTodos, preparedTodos } = this.state;\n    const randomizer = () => Math.floor(Math.random() * 3);\n\n    return [...(preparedTodos || filteredTodos || todos)].sort(() => (\n      randomizer() === 2 ? -1 : randomizer()\n    ));\n  }\n\n  makeTitleFilter = (query) => {\n    const { todos } = this.props;\n\n    return todos.filter((todo) => {\n      const { title, description } = todo;\n      const regex = new RegExp(query, 'gi');\n\n      return regex.test(title) || regex.test(description);\n    });\n  }\n\n  makeStatusFilter = (query) => {\n    const { todos } = this.props;\n    const { filteredTodos } = this.state;\n\n    return (filteredTodos || todos).filter((todo) => {\n      if (query === 'completed') {\n        return todo.completed === true;\n      }\n\n      if (query === 'active') {\n        return todo.completed === false;\n      }\n\n      return true;\n    });\n  }\n\n  render() {\n    const {\n      selectedUserId,\n      onUserSelect,\n      todos,\n    } = this.props;\n\n    const {\n      preparedTodos,\n      filteredTodos,\n    } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__list-container\">\n          <TodoForm\n            onTitleFiltering={this.onTitleFiltering}\n            onStatusFiltering={this.onStatusFiltering}\n            onRandomize={this.onRandomize}\n          />\n          <ul className=\"TodoList__list\">\n            {(preparedTodos || filteredTodos || todos).map((todo) => {\n              const todoItemClass = classNames({\n                TodoList__item: true,\n                'TodoList__item--checked': todo.completed === true,\n                'TodoList__item--unchecked': todo.completed === false,\n              });\n\n              return todo.userId && (\n                <li key={todo.id} className={todoItemClass}>\n                  <Todo\n                    userId={todo.userId}\n                    title={todo.title}\n                    isCompleted={todo.completed}\n                    selectedUserId={selectedUserId}\n                    onUserSelect={onUserSelect}\n                  />\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = TodoListsShape;\n","const API_URL = 'https://mate-api.herokuapp.com';\n\nexport const getTodos = () => fetch(`${API_URL}/todos`)\n  .then(response => response.json())\n  .then(result => result.data)\n  .then(todos => todos)\n  .catch(error => `Oooops...${error}`);\n\nexport const getUserDetails = userId => fetch(`${API_URL}/users/${userId}`)\n  .then(response => response.json())\n  .then(result => result.data)\n  .then(user => user)\n  .catch(error => `Oooops...${error}`);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { getUserDetails } from '../../api/api';\nimport { Button } from '../Button';\n\nexport class CurrentUser extends Component {\n  state = {\n    currentUser: null,\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.getUserDetails();\n    }\n  }\n\n  async getUserDetails() {\n    const { userId } = this.props;\n    const currentUser = await getUserDetails(userId);\n\n    this.setState({ currentUser: { ...currentUser } });\n  }\n\n  render() {\n    const { currentUser } = this.state;\n    const { onUserClear, userId } = this.props;\n\n    if (currentUser === null) {\n      this.getUserDetails();\n    }\n\n    return currentUser && (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {currentUser.id ? (\n              `Selected user: ${currentUser.id}`) : (\n              `No user with such id: ${userId}`\n            )}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">\n          {currentUser.name}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {currentUser.email}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {currentUser.phone}\n        </p>\n        <Button innerText=\"Clear\" action={onUserClear} />\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onUserClear: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  onUserSelect = (event) => {\n    const selectedUserId = Number(event.target.innerText.split('#')[1]);\n\n    this.setState({ selectedUserId });\n  }\n\n  onUserClear = () => this.setState({ selectedUserId: 0 })\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUserId={selectedUserId}\n            onUserSelect={this.onUserSelect}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onUserClear={this.onUserClear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}